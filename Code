!pip install opencv-python
%pip install ultralytics
import ultralytics
ultralytics.checks()

import cv2
import pandas as pd
import numpy as np
from ultralytics import YOLO
import time
import matplotlib.pyplot as plt

# Load YOLOv8 model
model = YOLO('yolov8s.pt')

# Mouse callback function for detecting mouse position
def RGB(event, x, y, flags, param):
    if event == cv2.EVENT_MOUSEMOVE:
        colorsBGR = [x, y]
        print(colorsBGR)

# Use a function to display images in the Colab notebook with matplotlib
def show_frame(frame):
    # Convert the BGR frame to RGB
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Plot the image using matplotlib
    plt.figure(figsize=(10, 5))
    plt.imshow(frame_rgb)
    plt.axis('off')  # Hide axes
    plt.show()

# Open the video file
cap = cv2.VideoCapture('parking1.mp4')

# Load class list
with open("coco.txt", "r") as my_file:
    data = my_file.read()
    class_list = data.split("\n")

# Define areas (polygons)
area1 = [(52, 364), (30, 417), (73, 412), (88, 369)]
area2 = [(105, 353), (86, 428), (137, 427), (146, 358)]
area3 = [(159, 354), (150, 427), (204, 425), (203, 353)]
area4 = [(217, 352), (219, 422), (273, 418), (261, 347)]
area5 = [(274, 345), (286, 417), (338, 415), (321, 345)]
area6 = [(336, 343), (357, 410), (409, 408), (382, 340)]
area7 = [(396, 338), (426, 404), (479, 399), (439, 334)]
area8 = [(458, 333), (494, 397), (543, 390), (495, 330)]
area9 = [(511, 327), (557, 388), (603, 383), (549, 324)]
area10 = [(564, 323), (615, 381), (654, 372), (596, 315)]
area11 = [(616, 316), (666, 369), (703, 363), (642, 312)]
area12 = [(674, 311), (730, 360), (764, 355), (707, 308)]

# Process frames in a loop
while True:
    ret, frame = cap.read()
    if not ret:
        break

    time.sleep(1)
    frame = cv2.resize(frame, (1020, 500))

    results = model.predict(frame)
    a = results[0].boxes.data
    px = pd.DataFrame(a).astype("float")

    # Create lists to store objects detected in each area
    areas = [[] for _ in range(12)]

    for index, row in px.iterrows():
        x1, y1, x2, y2, _, class_idx = row
        class_name = class_list[int(class_idx)]

        if 'car' in class_name:
            cx = int(x1 + x2) // 2
            cy = int(y1 + y2) // 2

            # Check if the object is in any of the defined areas
            for i, area in enumerate([area1, area2, area3, area4, area5, area6, area7, area8, area9, area10, area11, area12]):
                if cv2.pointPolygonTest(np.array(area, np.int32), (cx, cy), False) >= 0:
                    cv2.rectangle(frame, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
                    cv2.circle(frame, (cx, cy), 3, (0, 0, 255), -1)
                    areas[i].append(class_name)
                    cv2.putText(frame, class_name, (int(x1), int(y1)), cv2.FONT_HERSHEY_COMPLEX, 0.5, (255, 255, 255), 1)

    # Update the areas with the number of detected cars
    space = 12 - sum(len(area) for area in areas)
    print(f"Space available: {space}")

    # Draw polygons and show status for each area
    for i, area in enumerate([area1, area2, area3, area4, area5, area6, area7, area8, area9, area10, area11, area12]):
        color = (0, 0, 255) if len(areas[i]) == 1 else (0, 255, 0)
        cv2.polylines(frame, [np.array(area, np.int32)], True, color, 2)
        cv2.putText(frame, str(i + 1), area[0], cv2.FONT_HERSHEY_COMPLEX, 0.5, color, 1)

    # Display the frame in Colab
    show_frame(frame)

    # Break on pressing the 'Esc' key
    if cv2.waitKey(1) & 0xFF == 27:
        break

cap.release()
cv2.destroyAllWindows()
